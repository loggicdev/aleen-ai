import os
import re
import time
import sys
import json
import requests
import secrets
import string
import traceback
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
from agents import Agent, Runner
from typing import List, Optional, Dict
import redis
from dotenv import load_dotenv
from supabase import create_client, Client

# Force stdout to be unbuffered for Docker logs
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)

load_dotenv()

app = FastAPI(title="Aleen AI Agents", version="1.0.0")

# Redis connection with retry mechanism
def connect_redis_with_retry(max_retries=10, delay=3):
    for attempt in range(max_retries):
        try:
            # Priorizar vari√°veis de ambiente individuais (mesmo padr√£o do Node.js)
            redis_host = os.getenv("REDIS_HOST")
            redis_port = os.getenv("REDIS_PORT")
            redis_username = os.getenv("REDIS_USERNAME", "default")
            redis_password = os.getenv("REDIS_PASSWORD")
            redis_db = int(os.getenv("REDIS_DB", "0"))
            
            if redis_host and redis_password:
                # Configura√ß√£o individual (preferida) - Redis Cloud
                print(f"üîç Tentativa {attempt + 1}/{max_retries} - Redis individual config:")
                print(f"   Host: {redis_host}")
                print(f"   Port: {redis_port}")
                print(f"   Username: {redis_username}")
                print(f"   Password length: {len(redis_password) if redis_password else 0}")
                print(f"   DB: {redis_db}")
                
                redis_client = redis.Redis(
                    host=redis_host,
                    port=int(redis_port) if redis_port else 6379,
                    username=redis_username,
                    password=redis_password,
                    db=redis_db,
                    decode_responses=True,
                    socket_timeout=10,
                    socket_connect_timeout=10,
                    socket_keepalive=True,
                    socket_keepalive_options={},
                    retry_on_timeout=True,
                    health_check_interval=30
                )
            else:
                # Fallback para URL-based configuration
                redis_url = os.getenv("REDIS_URL")
                if not redis_url:
                    # Auto-detecta ambiente
                    if os.getenv("ENVIRONMENT") == "production" or os.path.exists("/.dockerenv"):
                        redis_url = "redis://redis:6379"
                    else:
                        redis_url = "redis://localhost:6380"
                
                print(f"üîç Tentativa {attempt + 1}/{max_retries} - Redis URL config: {redis_url}")
                
                redis_client = redis.from_url(
                    redis_url, 
                    decode_responses=True, 
                    socket_timeout=10, 
                    socket_connect_timeout=10,
                    retry_on_timeout=True,
                    health_check_interval=30
                )
            
            # Test connection
            redis_client.ping()
            print("‚úÖ Redis conectado com sucesso")
            return redis_client
            
        except Exception as e:
            if attempt < max_retries - 1:
                print(f"‚ö†Ô∏è Tentativa {attempt + 1}/{max_retries} - Erro ao conectar Redis: {e}")
                print(f"üîÑ Tentando novamente em {delay} segundos...")
                time.sleep(delay)
            else:
                print(f"‚ùå Falha ao conectar Redis ap√≥s {max_retries} tentativas: {e}")
                print("üîß Usando cliente Redis mock para desenvolvimento")
                # Create a mock Redis client for development
                class MockRedis:
                    def get(self, key): 
                        print(f"üìù MockRedis.get({key}) -> None")
                        return None
                    def setex(self, key, time, value): 
                        print(f"üìù MockRedis.setex({key}, {time}, [value])")
                        pass
                    def ping(self): 
                        return True
                    def delete(self, key):
                        print(f"üìù MockRedis.delete({key})")
                        pass
                return MockRedis()

redis_client = connect_redis_with_retry()

# Fun√ß√µes para gerenciar mem√≥ria do usu√°rio
def get_user_memory(phone_number: str) -> List[str]:
    """Recupera a mem√≥ria/hist√≥rico do usu√°rio baseado no n√∫mero de telefone"""
    try:
        clean_phone = re.sub(r'[^\d]', '', phone_number)
        memory_key = f"user_memory:{clean_phone}"
        
        memory_data = redis_client.get(memory_key)
        if memory_data:
            # Como decode_responses=True, memory_data j√° √© uma string
            import json
            return json.loads(memory_data)
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao recuperar mem√≥ria do usu√°rio {phone_number}: {e}")
        return []

def save_user_memory(phone_number: str, conversation_history: List[str], max_messages: int = 20):
    """Salva a mem√≥ria/hist√≥rico do usu√°rio baseado no n√∫mero de telefone"""
    try:
        clean_phone = re.sub(r'[^\d]', '', phone_number)
        memory_key = f"user_memory:{clean_phone}"
        
        # Mant√©m apenas as √∫ltimas max_messages mensagens para n√£o sobrecarregar
        if len(conversation_history) > max_messages:
            conversation_history = conversation_history[-max_messages:]
        
        # Salva como JSON com TTL de 7 dias (604800 segundos)
        import json
        redis_client.setex(memory_key, 604800, json.dumps(conversation_history, ensure_ascii=False))
        
        print(f"üíæ Mem√≥ria salva para {clean_phone}: {len(conversation_history)} mensagens")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar mem√≥ria do usu√°rio {phone_number}: {e}")

def add_to_user_memory(phone_number: str, user_message: str, ai_response: str):
    """Adiciona uma nova intera√ß√£o √† mem√≥ria do usu√°rio"""
    try:
        # Recupera mem√≥ria existente
        memory = get_user_memory(phone_number)
        
        # Adiciona nova intera√ß√£o
        memory.append(f"Usu√°rio: {user_message}")
        memory.append(f"Aleen: {ai_response}")
        
        # Salva mem√≥ria atualizada
        save_user_memory(phone_number, memory)
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao adicionar √† mem√≥ria do usu√°rio {phone_number}: {e}")

def get_conversation_context(phone_number: str, current_message: str, max_context_length: int = 2000) -> str:
    """Gera contexto da conversa para enviar √† IA"""
    try:
        memory = get_user_memory(phone_number)
        
        # Se n√£o h√° mem√≥ria, retorna apenas a mensagem atual
        if not memory:
            return current_message
        
        # Constr√≥i o contexto
        context_parts = []
        context_parts.extend(memory[-10:])  # √öltimas 10 mensagens da mem√≥ria
        context_parts.append(f"Usu√°rio: {current_message}")
        
        full_context = "\n".join(context_parts)
        
        # Se o contexto for muito longo, corta mantendo as mensagens mais recentes
        if len(full_context) > max_context_length:
            # Tenta com menos mensagens
            context_parts = memory[-6:] + [f"Usu√°rio: {current_message}"]
            full_context = "\n".join(context_parts)
            
            if len(full_context) > max_context_length:
                # Se ainda for muito longo, corta o texto
                full_context = full_context[-max_context_length:]
        
        return full_context
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar contexto para {phone_number}: {e}")
        return current_message

# OpenAI client
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# OpenAI client
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Supabase client
supabase_url = os.getenv("SUPABASE_URL") or os.getenv("NEXT_PUBLIC_SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or os.getenv("SUPABASE_ANON_KEY")

if not supabase_url or not supabase_key:
    raise ValueError("Supabase URL and key are required")

supabase: Client = create_client(supabase_url, supabase_key)

# Tools para os agentes
def get_user_id_by_phone(phone: str) -> str:
    """
    Busca o user_id de um usu√°rio baseado no n√∫mero de telefone
    Retorna None se n√£o encontrar
    """
    try:
        clean_phone = re.sub(r'[^\d]', '', phone)
        response = supabase.table('users').select('id').eq('phone', clean_phone).execute()
        
        if response.data and len(response.data) > 0:
            return response.data[0]['id']
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar user_id por telefone {phone}: {e}")
        return None

def get_onboarding_questions() -> dict:
    """
    Busca as perguntas de onboarding do banco de dados
    Retorna apenas perguntas configuradas para WhatsApp
    """
    try:
        response = supabase.table('onboarding_questions').select('*').eq('send_in', 'whatsapp').eq('is_active', True).order('step_number').execute()
        
        if not response.data:
            return {
                "success": False,
                "message": "Nenhuma pergunta encontrada",
                "questions": []
            }
        
        questions = []
        for question in response.data:
            questions.append({
                "id": question.get('id'),
                "step": question.get('step_number'),
                "question": question.get('title', ''),
                "subtitle": question.get('subtitle', ''),
                "type": question.get('question_type', 'text'),
                "field_name": question.get('field_name', ''),
                "required": question.get('required', True),
                "options": question.get('options', []),
                "emoji": question.get('emoji', ''),
                "placeholder": question.get('placeholder', '')
            })
        
        return {
            "success": True,
            "message": f"Encontradas {len(questions)} perguntas",
            "questions": questions
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar perguntas de onboarding: {e}")
        return {
            "success": False,
            "message": f"Erro ao buscar perguntas: {str(e)}",
            "questions": []
        }

def create_user_and_save_onboarding(name: str, age: str, email: str, phone: str) -> dict:
    """
    Cria um usu√°rio com autentica√ß√£o usando Supabase Auth REST API,
    salva na tabela users e registra respostas de onboarding
    Args:
        name: Nome do usu√°rio
        age: Idade do usu√°rio  
        email: Email do usu√°rio
        phone: Telefone do usu√°rio
    """
    try:
        print(f"üîß Criando usu√°rio: {name}, {age}, {email}, {phone}")
        
        # 1. Gerar senha tempor√°ria segura
        import secrets
        import string
        temp_password = ''.join(secrets.choice(string.ascii_letters + string.digits + "!@#$%") for i in range(16))
        
        # 2. Criar usu√°rio usando Supabase Auth REST API diretamente
        print(f"üîê Criando usu√°rio via Auth REST API...")
        
        try:
            import requests
            
            # URL da API de signup do Supabase
            auth_url = f"{supabase_url}/auth/v1/signup"
            
            # Headers para a requisi√ß√£o
            headers = {
                "apikey": os.getenv("SUPABASE_SERVICE_ROLE_KEY"),
                "Content-Type": "application/json",
                "Authorization": f"Bearer {os.getenv('SUPABASE_SERVICE_ROLE_KEY')}"
            }
            
            # Dados do usu√°rio
            auth_data = {
                "email": email,
                "password": temp_password,
                "data": {
                    "name": name,
                    "age": age,
                    "created_via": "whatsapp_onboarding"
                }
            }
            
            print(f"üì° Enviando requisi√ß√£o para: {auth_url}")
            print(f"üìã Dados: email={email}, password=[HIDDEN]")
            
            # Fazer a requisi√ß√£o
            response = requests.post(auth_url, json=auth_data, headers=headers, timeout=30)
            
            print(f"üìä Status da resposta: {response.status_code}")
            
            if response.status_code in [200, 201]:
                response_data = response.json()
                if response_data.get('user') and response_data['user'].get('id'):
                    user_id = response_data['user']['id']
                    print(f"‚úÖ Usu√°rio criado na auth com ID: {user_id}")
                else:
                    print(f"‚ö†Ô∏è Resposta inesperada da Auth API: {response_data}")
                    return {
                        "success": False,
                        "message": "Resposta inesperada da API de autentica√ß√£o",
                        "user_id": None,
                        "details": str(response_data)
                    }
            else:
                error_msg = response.text
                print(f"‚ùå Erro HTTP {response.status_code}: {error_msg}")
                return {
                    "success": False,
                    "message": f"Erro HTTP {response.status_code} ao criar usu√°rio",
                    "user_id": None,
                    "details": error_msg
                }
                
        except Exception as auth_error:
            print(f"‚ùå Erro na cria√ß√£o via Auth REST API: {auth_error}")
            print(f"üìã Dados enviados: email={email}, phone={phone}")
            print(f"üîç Auth URL: {auth_url}")
            print(f"üîë Headers: {headers}")
            return {
                "success": False,
                "message": f"Erro na autentica√ß√£o: {str(auth_error)}",
                "user_id": None
            }
        
        # 3. O trigger handle_new_user criar√° automaticamente o registro em public.users
        # Vamos aguardar um momento para o trigger executar e depois atualizar com informa√ß√µes adicionais
        try:
            import time
            time.sleep(1)  # Aguarda o trigger executar
            
            # Atualiza o registro criado pelo trigger com informa√ß√µes adicionais
            user_update_data = {
                "name": name,
                "phone": phone,
                "nickname": name  # Usa o nome como nickname inicial
            }
            
            user_response = supabase.table('users').update(user_update_data).eq('id', user_id).execute()
            
            if not user_response.data:
                print("‚ö†Ô∏è Usu√°rio criado na auth, mas erro ao atualizar informa√ß√µes na tabela users")
                # Mesmo assim, continuamos pois o usu√°rio foi criado
            else:
                print(f"‚úÖ Informa√ß√µes do usu√°rio atualizadas na tabela users")
            
        except Exception as user_error:
            print(f"‚ùå Erro ao atualizar informa√ß√µes na tabela users: {user_error}")
            # N√£o retornamos erro aqui, pois o usu√°rio foi criado com sucesso na auth
        
        # 4. Buscar as perguntas b√°sicas de onboarding (nome, idade, email)
        try:
            questions_response = supabase.table('onboarding_questions').select('*').eq('send_in', 'whatsapp').eq('is_active', True).in_('field_name', ['name', 'age', 'email']).execute()
            
            if not questions_response.data:
                print("‚ö†Ô∏è Perguntas de onboarding n√£o encontradas, mas usu√°rio foi criado")
            else:
                # 5. Salvar respostas na tabela onboarding_responses
                responses_data = []
                for question in questions_response.data:
                    field_name = question.get('field_name')
                    response_value = ""
                    
                    if field_name == 'name':
                        response_value = name
                    elif field_name == 'age':
                        response_value = age
                    elif field_name == 'email':
                        response_value = email
                        
                    if response_value:
                        responses_data.append({
                            "user_id": user_id,
                            "question_id": question.get('id'),
                            "response_value": response_value
                        })
                
                if responses_data:
                    responses_response = supabase.table('onboarding_responses').insert(responses_data).execute()
                    
                    if responses_response.data:
                        print(f"‚úÖ {len(responses_data)} respostas de onboarding salvas")
                    else:
                        print("‚ö†Ô∏è Erro ao salvar respostas de onboarding, mas usu√°rio foi criado")
                        
        except Exception as questions_error:
            print(f"‚ö†Ô∏è Erro ao processar perguntas de onboarding: {questions_error}")
        
        # 6. Atualizar lead se existir
        try:
            lead_response = supabase.table('leads').select('id').eq('phone', phone).execute()
            if lead_response.data:
                lead_id = lead_response.data[0]['id']
                supabase.table('leads').update({
                    "user_id": user_id,
                    "onboarding_concluido": True
                }).eq('id', lead_id).execute()
                print(f"‚úÖ Lead atualizado para usu√°rio {user_id}")
        except Exception as lead_error:
            print(f"‚ö†Ô∏è Erro ao atualizar lead: {lead_error}")
        
        return {
            "success": True,
            "message": f"üéâ Conta criada com sucesso!\n\nüìß Email: {email}\nüîë Senha tempor√°ria: {temp_password}\n\nVoc√™ j√° pode fazer login no app da Aleen usando essas credenciais. Recomendamos alterar sua senha ap√≥s o primeiro login.\n\nüîó Continue seu onboarding aqui: https://aleen.dp.claudy.host/onboarding/{user_id}",
            "user_id": user_id,
            "temp_password": temp_password,
            "email": email,
            "onboarding_url": f"https://aleen.dp.claudy.host/onboarding/{user_id}",
            "login_instructions": "Use o email e senha tempor√°ria para fazer login no app da Aleen, depois complete seu onboarding no link acima."
        }
        
    except Exception as e:
        print(f"‚ùå Erro geral ao criar usu√°rio: {e}")
        import traceback
        print(f"üìã Stack trace: {traceback.format_exc()}")
        return {
            "success": False,
            "message": f"Erro ao criar usu√°rio: {str(e)}",
            "user_id": None
        }

# Defini√ß√£o das tools dispon√≠veis para os agentes
AVAILABLE_TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "get_onboarding_questions",
            "description": "Busca as perguntas de onboarding configuradas no banco de dados para WhatsApp. Use esta ferramenta quando o usu√°rio demonstrar interesse em iniciar o processo de onboarding/cadastro.",
            "parameters": {
                "type": "object",
                "properties": {},
                "required": []
            }
        }
    },
    {
        "type": "function", 
        "function": {
            "name": "create_user_and_save_onboarding",
            "description": "Cria um novo usu√°rio com autentica√ß√£o Supabase ap√≥s coletar nome, idade e email durante o onboarding inicial. O usu√°rio receber√° uma senha tempor√°ria, pode fazer login imediatamente E receber√° automaticamente o link de onboarding para continuar o processo na plataforma web. Use quando o usu√°rio fornecer as 3 informa√ß√µes b√°sicas (nome, idade, email).",
            "parameters": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Nome completo do usu√°rio"
                    },
                    "age": {
                        "type": "string", 
                        "description": "Idade do usu√°rio"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email do usu√°rio para login"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Telefone do usu√°rio (n√∫mero de WhatsApp)"
                    }
                },
                "required": ["name", "age", "email", "phone"]
            }
        }
    }
]

# Executor das tools
def execute_tool(tool_name: str, arguments: dict, context_phone: str = None):
    """Executa uma tool baseada no nome"""
    if tool_name == "get_onboarding_questions":
        return get_onboarding_questions()
    elif tool_name == "create_user_and_save_onboarding":
        # O telefone deve vir do contexto da conversa, n√£o dos argumentos
        phone = context_phone or arguments.get('phone', '')
        
        if not phone:
            return {
                "success": False,
                "message": "Telefone n√£o fornecido no contexto da conversa",
                "user_id": None
            }
            
        return create_user_and_save_onboarding(
            name=arguments.get('name'),
            age=arguments.get('age'), 
            email=arguments.get('email'),
            phone=phone
        )
    else:
        return {"error": f"Tool '{tool_name}' n√£o encontrada"}

# Evolution API Integration
class EvolutionAPIService:
    def __init__(self):
        self.base_url = os.getenv("EVOLUTION_API_BASE_URL", "")
        self.api_key = os.getenv("EVOLUTION_API_KEY", "")
        self.instance = os.getenv("EVOLUTION_INSTANCE", "")
        
        if not all([self.base_url, self.api_key, self.instance]):
            print("‚ö†Ô∏è Evolution API configuration incomplete")
    
    def clean_phone_number(self, phone: str) -> str:
        """Remove caracteres especiais do n√∫mero de telefone"""
        return re.sub(r'[^\d]', '', phone)
    
    def split_message(self, text: str, max_length: int = 200) -> List[str]:
        """Quebra mensagem longa em m√∫ltiplas partes respeitando quebras naturais"""
        if len(text) <= max_length:
            return [text]
        
        # Primeiro, quebra pelos \n\n que a IA j√° inseriu intencionalmente
        parts = text.split('\\n\\n')  # Split por \n\n literal que vem da IA
        if len(parts) == 1:
            # Se n√£o tem \n\n literal, tenta \n\n normal
            parts = text.split('\n\n')
        
        messages = []
        current_message = ""
        
        for part in parts:
            part = part.strip()
            if not part:
                continue
            
            # Se a parte sozinha cabe no limite
            if len(part) <= max_length:
                # Se adicionar essa parte excede o limite, envia a atual e inicia nova
                if current_message and len(current_message + " " + part) > max_length:
                    messages.append(current_message.strip())
                    current_message = part
                elif current_message:
                    current_message += " " + part
                else:
                    current_message = part
            else:
                # Parte muito longa, quebra por frases
                if current_message:
                    messages.append(current_message.strip())
                    current_message = ""
                
                sentences = re.split(r'(?<=[.!?])\s+', part)
                for sentence in sentences:
                    sentence = sentence.strip()
                    if not sentence:
                        continue
                    
                    if current_message and len(current_message + " " + sentence) > max_length:
                        messages.append(current_message.strip())
                        current_message = sentence
                    elif len(sentence) > max_length:
                        # Frase muito longa, for√ßa quebra por palavras
                        if current_message:
                            messages.append(current_message.strip())
                            current_message = ""
                        
                        words = sentence.split()
                        for word in words:
                            if current_message and len(current_message + " " + word) > max_length:
                                messages.append(current_message.strip())
                                current_message = word
                            else:
                                current_message += " " + word if current_message else word
                    else:
                        current_message += " " + sentence if current_message else sentence
        
        if current_message:
            messages.append(current_message.strip())
        
        # Limpa as mensagens removendo \n extras e m√∫ltiplos espa√ßos
        clean_messages = []
        for msg in messages:
            # Remove \n\n literais que podem ter sobrado
            cleaned = msg.replace('\\n\\n', ' ').replace('\\n', ' ').replace('\n', ' ')
            # Remove m√∫ltiplos espa√ßos
            cleaned = re.sub(r'\s+', ' ', cleaned).strip()
            if cleaned:
                clean_messages.append(cleaned)
        
        return clean_messages if clean_messages else [text.replace('\\n\\n', ' ').replace('\\n', ' ')]
    
    def send_text_message(self, phone_number: str, text: str, delay: int = 3500) -> bool:
        """Envia mensagem de texto via Evolution API com quebra autom√°tica"""
        try:
            clean_number = self.clean_phone_number(phone_number)
            messages = self.split_message(text)
            
            print(f"üì± Enviando {len(messages)} mensagem(s) para {clean_number}")
            print(f"üîç Mensagens quebradas:")
            for i, msg in enumerate(messages):
                print(f"   {i+1}. ({len(msg)} chars): {msg[:50]}...")
            
            for i, message in enumerate(messages):
                payload = {
                    "number": clean_number,
                    "text": message,
                    "options": {
                        "delay": delay,
                        "presence": "composing", 
                        "linkPreview": False
                    }
                }
                
                url = f"{self.base_url}/message/sendText/{self.instance}"
                
                headers = {
                    "Content-Type": "application/json",
                    "apikey": self.api_key
                }
                
                response = requests.post(url, json=payload, headers=headers, timeout=30)
                
                if response.status_code in [200, 201]:
                    print(f"‚úÖ Mensagem {i+1}/{len(messages)} enviada com sucesso")
                    if i < len(messages) - 1:  # Delay entre mensagens (s√≥ se n√£o for a √∫ltima)
                        print(f"‚è±Ô∏è Aguardando {delay/1000}s antes da pr√≥xima mensagem...")
                        time.sleep(delay / 1000)  # Convert ms to seconds
                else:
                    print(f"‚ùå Erro ao enviar mensagem {i+1}: {response.status_code} - {response.text}")
                    return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar mensagem via WhatsApp: {e}")
            return False

# Instanciar o servi√ßo Evolution API
evolution_service = EvolutionAPIService()

class MessageRequest(BaseModel):
    user_id: str
    user_name: str
    message: str
    conversation_history: Optional[List[str]] = []
    recommended_agent: Optional[str] = None

class UserContext(BaseModel):
    has_account: bool = False
    onboarding_completed: bool = False
    user_type: str = "new_user"  # 'new_user' | 'incomplete_onboarding' | 'complete_user'
    onboarding_url: Optional[str] = None
    is_lead: bool = False
    is_user: bool = False

class WhatsAppMessageRequest(BaseModel):
    user_id: str
    user_name: str
    phone_number: str
    message: str
    conversation_history: Optional[List[str]] = []
    recommended_agent: Optional[str] = None
    send_to_whatsapp: bool = True
    user_context: Optional[UserContext] = None

class MessageResponse(BaseModel):
    response: str
    agent_used: str
    should_handoff: bool = False
    next_agent: Optional[str] = None

class WhatsAppMessageResponse(BaseModel):
    response: str
    agent_used: str
    should_handoff: bool = False
    next_agent: Optional[str] = None
    whatsapp_sent: bool = False
    messages_sent: int = 0

class SendWhatsAppRequest(BaseModel):
    phone_number: str
    message: str

# Cache para armazenar agentes do Supabase
agents_cache: Dict[str, Agent] = {}
agents_config: Dict[str, Dict] = {}

def load_agents_from_supabase():
    """Carrega os agentes e seus prompts do Supabase"""
    try:
        response = supabase.table('agents').select('*').execute()
        
        if not response.data:
            print("Nenhum agente encontrado no Supabase")
            return False
            
        global agents_cache, agents_config
        agents_cache.clear()
        agents_config.clear()
        
        # Mapeia os identifiers para tipos de agente (contexto FITNESS/NUTRI√á√ÉO)
        identifier_map = {
            'GREETING_WITHOUT_MEMORY': 'onboarding',  # Prompt fitness em ingl√™s
            'DOUBT': 'support',                       # Prompt fitness em ingl√™s  
            'SALES': 'sales',                         # Prompt fitness em ingl√™s
            'OUT_CONTEXT': 'out_context',             # Agente para mensagens fora de contexto
            'ONBOARDING_REMINDER': 'onboarding_reminder',  # Agente para onboarding incompleto
            # Mant√©m compatibilidade com identifiers antigos
            'ONBOARDING_INIT': 'onboarding',
            'GREETING_WITH_MEMORY': 'onboarding',
            'ONBOARDING_PENDING': 'onboarding'
        }
        
        for agent_data in response.data:
            identifier = agent_data.get('identifier', '')
            agent_type = identifier_map.get(identifier, 'onboarding')
            
            # Sempre carrega o agente, pode sobrescrever se necess√°rio
            agents_config[agent_type] = {
                'id': agent_data['id'],
                'name': agent_data.get('name', 'Aleen'),
                'prompt': agent_data.get('prompt', ''),
                'description': agent_data.get('description', ''),
                'identifier': identifier
            }
            
            # Cria o agente com o prompt do Supabase + instru√ß√£o de idioma
            base_prompt = agent_data.get('prompt', '')
            
            # Adiciona instru√ß√£o de idioma responsivo
            language_instruction = """

INSTRU√á√ÉO CR√çTICA DE IDIOMA:
- SEMPRE responda no mesmo idioma que o usu√°rio est√° falando
- Se o usu√°rio falar em portugu√™s, responda em portugu√™s  
- Se o usu√°rio falar em ingl√™s, responda em ingl√™s
- Se o usu√°rio falar em espanhol, responda em espanhol
- Mantenha o mesmo idioma durante toda a conversa
- Seja natural e fluente no idioma escolhido

"""
            
            final_prompt = base_prompt + language_instruction
            
            agents_cache[agent_type] = Agent(
                name=f"{agent_data.get('name', 'Aleen')} - {agent_type.title()}",
                instructions=final_prompt,
                model="gpt-5-mini"
            )
        
        # Se n√£o encontrou agente de sales, cria um baseado no padr√£o (n√£o deveria acontecer mais)
        if 'sales' not in agents_config:
            agents_config['sales'] = {
                'id': 'generated-sales-fallback',
                'name': 'Aleen Sales Agent',
                'prompt': """You are Aleen Sales, the consultative sales specialist for Aleen IA business automation solutions.

Your objective is to understand business needs and present appropriate solutions.

**RULES:**
- Always respond in the same language the user is speaking to you
- Always break your messages with \\n\\n for more human and natural reading
- Be consultative, not pushy
- Focus on problems and solutions
- DO NOT invent information you're unsure about
- If you need technical support, transfer to Support Agent

**MAIN SERVICES:**
- Customer service automation with AI
- Intelligent WhatsApp chatbots
- Data analysis and insights
- Integration with existing systems

Ask about:
- Service volume
- Current processes
- Specific pain points
- Budget and timeline""",
                'description': 'Fallback sales agent with English prompt',
                'identifier': 'SALES_FALLBACK'
            }
            
            agents_cache['sales'] = Agent(
                name="Aleen Sales Agent",
                instructions=agents_config['sales']['prompt'],
                model="gpt-5-mini"
            )
        
        print(f"Carregados {len(agents_cache)} agentes do Supabase:")
        for agent_type, config in agents_config.items():
            print(f"  - {agent_type}: {config['name']} ({config['identifier']})")
            
        return True
        
    except Exception as e:
        print(f"Erro ao carregar agentes do Supabase: {e}")
        return False

# Fun√ß√£o para criar agentes padr√£o (fallback)
def create_default_agents():
    """Cria agentes padr√£o caso n√£o consiga carregar do Supabase"""
    global agents_cache, agents_config
    
    print("üîß Criando agentes padr√£o em portugu√™s...")
    
    default_configs = {
        'onboarding': {
            'name': 'Aleen Onboarding PT',
            'prompt': """Voc√™ √© a Aleen, a assistente inteligente de fitness e nutri√ß√£o. Voc√™ √© muito amig√°vel, prestativa e clara.

Sua miss√£o √© dar as boas-vindas a novos contatos, apresentar brevemente o app e perguntar se eles t√™m interesse em conhecer.

**REGRAS:**
- SEMPRE responda no mesmo idioma que o usu√°rio est√° falando
- SEMPRE quebre suas mensagens com \\n\\n para leitura mais humana e natural
- Seja calorosa e amig√°vel
- Foque apenas em dar boas-vindas e apresentar o app de fitness
- N√ÉO invente informa√ß√µes ou "adivinhe" respostas

Sobre a Aleen: Sua personal trainer inteligente que funciona no WhatsApp, cria planos personalizados de treino e nutri√ß√£o.
Pergunte se eles querem conhecer mais ou iniciar o teste gr√°tis de 14 dias."""
        },
        'onboarding_reminder': {
            'name': 'Aleen Onboarding Reminder',
            'prompt': """Voc√™ √© a Aleen, assistente inteligente de fitness e nutri√ß√£o. O usu√°rio J√Å come√ßou seu cadastro mas ainda n√£o finalizou.

**CONTEXTO IMPORTANTE:** O usu√°rio tem uma conta parcial e precisa completar o onboarding na plataforma web.

**SUA MISS√ÉO:**
- Lembrar o usu√°rio de forma amig√°vel e variada sobre completar o cadastro
- Explicar brevemente os benef√≠cios de finalizar o onboarding
- Fornecer o link personalizado quando apropriado
- Ser emp√°tica mas n√£o repetitiva
- IMPORTANTE: Detectar se √© primeira vez ou usu√°rio recorrente baseado no hist√≥rico da conversa

**REGRAS:**
- SEMPRE responda no mesmo idioma que o usu√°rio est√° falando
- SEMPRE quebre suas mensagens com \\n\\n para leitura mais humana e natural
- VARIE suas respostas - n√£o seja rob√≥tica ou repetitiva
- Seja motivadora e explique PORQU√ä √© importante completar
- Pode responder d√∫vidas b√°sicas mas sempre retorne ao onboarding
- Use emojis para tornar mais humana
- ANALISE o hist√≥rico da conversa para determinar se j√° falou sobre onboarding antes

**ESTRAT√âGIAS DE VARIA√á√ÉO:**
1¬™ intera√ß√£o (hist√≥rico vazio): Amig√°vel e explicativa sobre os benef√≠cios
2¬™-3¬™ intera√ß√£o: Mais direta mas simp√°tica, foque na conveni√™ncia  
4¬™+ intera√ß√£o: Pergunte se h√° alguma dificuldade espec√≠fica, ofere√ßa ajuda

**BENEF√çCIOS PARA MENCIONAR:**
- Planos de treino 100% personalizados para seu perfil
- Card√°pio personalizado baseado em suas prefer√™ncias
- Acompanhamento inteligente do progresso
- Suporte 24/7 no WhatsApp
- Tudo adaptado ao seu estilo de vida

Lembre: O link ser√° fornecido automaticamente pelo sistema quando necess√°rio."""
        },
        'sales': {
            'name': 'Aleen Sales Agent',
            'prompt': """You are Aleen, the intelligent fitness and nutrition agent focused on helping users start their fitness journey.

**RULES:**
- Always respond in the same language the user is speaking to you
- Always break your messages with \\n\\n for more human and natural reading
- Be motivating and inspiring
- Focus on benefits and results
- DO NOT invent information you're unsure about

Help users understand benefits and guide them through starting their 14-day free trial.
Focus on personalized workout plans, nutrition guidance, and WhatsApp convenience."""
        },
        'support': {
            'name': 'Aleen Support Agent',
            'prompt': """You are Aleen, the intelligent fitness and nutrition agent helping with questions about the app.

**RULES:**
- Always respond in the same language the user is speaking to you
- Always break your messages with \\n\\n for more human and natural reading
- Be helpful and clear
- DO NOT invent information you're unsure about

Answer questions about how the app works, personalized workouts, nutrition plans, and the 14-day free trial.
Stay focused on fitness and nutrition topics only."""
        },
        'out_context': {
            'name': 'Aleen Out of Context Agent',
            'prompt': """You are Aleen, the intelligent fitness and nutrition agent.

Your role is to handle messages outside the context of fitness, nutrition, or the Aleen app.

**RULES:**
- Always respond in the same language the user is speaking to you
- Always break your messages with \\n\\n for more human and natural reading
- Be polite but redirect back to fitness topics
- DO NOT answer questions unrelated to fitness/nutrition
- DO NOT invent information outside your expertise

Politely redirect users back to fitness and nutrition topics where you can help them."""
        }
    }
    
    for agent_type, config in default_configs.items():
        agents_config[agent_type] = config
        agents_cache[agent_type] = Agent(
            name=config['name'],
            instructions=config['prompt'],
            model="gpt-5-mini"
        )

# Carrega agentes na inicializa√ß√£o
if not load_agents_from_supabase():
    print("Usando agentes padr√£o como fallback")
    create_default_agents()

# Define AI Agents (removido - agora carregados do Supabase)
def onboarding_agent():
    return agents_cache.get('onboarding')

def sales_agent():
    return agents_cache.get('sales')

def support_agent():
    return agents_cache.get('support')

# Agent instances (agora referencia o cache)
agents = agents_cache

def determine_initial_agent(message: str, user_history: List[str], recommended_agent: Optional[str] = None, user_context: Optional[UserContext] = None) -> str:
    """Determina qual agente deve atender baseado na mensagem, hist√≥rico e contexto do usu√°rio"""
    
    # Log do contexto de usu√°rio para debugging
    if user_context:
        print(f"üîç UserContext detectado - Tipo: {user_context.user_type}, Account: {user_context.has_account}, Onboarding: {user_context.onboarding_completed}")
        if user_context.onboarding_url:
            print(f"üîó URL de onboarding dispon√≠vel: {user_context.onboarding_url}")
    else:
        print(f"üîç Nenhum UserContext fornecido - usando l√≥gica padr√£o")
    
    # NOVA L√ìGICA: Verifica contexto de usu√°rio primeiro
    if user_context:
        # Usu√°rio com onboarding incompleto - precisa de agente especializado
        if user_context.user_type == "incomplete_onboarding":
            print(f"üéØ Agente selecionado por contexto: onboarding_reminder (usu√°rio com onboarding incompleto)")
            return "onboarding_reminder"
        
        # Usu√°rio novo - processo normal de onboarding
        elif user_context.user_type == "new_user":
            print(f"üéØ Agente selecionado por contexto: onboarding (usu√°rio novo)")
            return "onboarding"
        
        # Usu√°rio completo - prossegue com l√≥gica normal
        elif user_context.user_type == "complete_user":
            print(f"üéØ Usu√°rio completo detectado - prosseguindo com l√≥gica normal de sele√ß√£o")
            # Continua com a l√≥gica normal abaixo
            pass
    
    # Se h√° uma recomenda√ß√£o espec√≠fica, usa ela
    if recommended_agent and recommended_agent in agents_cache:
        return recommended_agent
    
    # Palavras-chave claramente fora de contexto (n√£o relacionadas a fitness)
    out_context_keywords = [
        "tempo", "weather", "clima", "pol√≠tica", "not√≠cia", "futebol", "filme",
        "m√∫sica", "receita", "cozinhar", "viagem", "trabalho", "estudo", "escola",
        "matem√°tica", "hist√≥ria", "geografia", "programa√ß√£o", "tecnologia", "carros",
        "games", "jogos", "amor", "relacionamento", "piada", "joke", "previs√£o"
    ]
    
    message_lower = message.lower()
    
    # PRIMEIRA VERIFICA√á√ÉO: Se √© claramente fora de contexto
    if any(keyword in message_lower for keyword in out_context_keywords):
        return "out_context"
    
    # Se √© primeira intera√ß√£o E n√£o √© fora de contexto, vai para onboarding
    if not user_history:
        return "onboarding"
    
    # Palavras-chave para contexto FITNESS/NUTRI√á√ÉO
    fitness_keywords = [
        "treino", "exerc√≠cio", "workout", "muscula√ß√£o", "cardio", "peso", "academia", 
        "fitness", "sa√∫de", "emagrecer", "massa", "dieta", "nutri√ß√£o", "calorias",
        "alimenta√ß√£o", "prote√≠na", "carboidrato", "suplemento", "plano", "meta",
        "objetivo", "resultado", "progresso", "medidas", "corpo", "f√≠sico"
    ]
    
    # Palavras-chave para vendas (interesse em come√ßar)
    sales_keywords = [
        "pre√ßo", "valor", "custo", "plano", "contratar", "comprar", "or√ßamento",
        "quero come√ßar", "interessado", "teste", "gratis", "trial", "assinar"
    ]
    
    # Palavras-chave para suporte (d√∫vidas sobre funcionamento)
    support_keywords = [
        "como funciona", "como usar", "d√∫vida", "pergunta", "ajuda", "problema",
        "n√£o entendi", "explicar", "dashboard", "acompanhar", "progresso"
    ]
    
    # Verifica se cont√©m palavras de fitness (contexto correto)
    contains_fitness = any(keyword in message_lower for keyword in fitness_keywords)
    
    # Se n√£o cont√©m palavras de fitness, pode ser out_context
    if not contains_fitness:
        # Sauda√ß√µes simples v√£o para onboarding
        generic_greetings = ["oi", "ol√°", "hello", "hi", "bom dia", "boa tarde", "boa noite"]
        if message_lower.strip() in generic_greetings:
            return "onboarding"
        
        # Mensagens complexas sem contexto fitness v√£o para out_context
        if len(message_lower.split()) > 2:
            return "out_context"
    
    # L√≥gica normal para contexto fitness
    if any(keyword in message_lower for keyword in sales_keywords):
        return "sales"
    elif any(keyword in message_lower for keyword in support_keywords):
        return "support"
    else:
        # Default para onboarding se dentro do contexto fitness
        return "onboarding"

class ChatRequest(BaseModel):
    user_id: str
    user_name: str
    message: str
    conversation_history: Optional[List[str]] = []
    recommended_agent: Optional[str] = None

class ChatResponse(BaseModel):
    response: str
    agent_used: str
    should_handoff: bool = False
    next_agent: Optional[str] = None

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """Processa uma mensagem de chat usando o agente apropriado"""
    
    try:
        # Verifica se h√° agentes carregados
        if not agents_cache:
            print("‚ö†Ô∏è Nenhum agente carregado, tentando recarregar...")
            if not load_agents_from_supabase():
                print("‚ùå Falha ao carregar agentes do Supabase")
                raise HTTPException(status_code=500, detail="No agents available")
        
        # Determina qual agente usar
        agent_type = request.recommended_agent or 'onboarding'
        
        # Adiciona instru√ß√£o de idioma
        language_instruction = "\n\nIMPORTANTE: Sempre responda no mesmo idioma que o usu√°rio est√° usando. Se o usu√°rio escrever em portugu√™s, responda em portugu√™s. Se escrever em ingl√™s, responda em ingl√™s."
        
        # Log detalhado do processamento
        print(f"\n{'='*50}")
        print(f"üì® Recebida mensagem: {request.message}")
        print(f"üë§ Usu√°rio: {request.user_name} ({request.user_id})")
        print(f"üéØ Agente recomendado: {agent_type}")
        print(f"üìö Hist√≥rico: {len(request.conversation_history or [])} mensagens")
        
        # Mapeia o tipo para o identifier correto (apenas para logs)
        identifier_map = {
            'onboarding': 'GREETING_WITHOUT_MEMORY',
            'support': 'DOUBT',
            'sales': 'SALES',
            'out_context': 'OUT_CONTEXT'
        }
        
        identifier = identifier_map.get(agent_type, 'GREETING_WITHOUT_MEMORY')
        
        # Busca o agente no cache usando o agent_type (n√£o o identifier)
        if agent_type not in agents_cache:
            print(f"‚ö†Ô∏è Agente '{agent_type}' n√£o encontrado no cache")
            # Tenta usar onboarding como fallback
            agent_type = 'onboarding'
            if agent_type not in agents_cache:
                print("‚ùå Nenhum agente dispon√≠vel no cache")
                raise HTTPException(status_code=500, detail=f"Agent {agent_type} not found")
        
        agent = agents_cache[agent_type]
        
        # Atualiza as instru√ß√µes do agente com a instru√ß√£o de idioma
        original_instructions = agent.instructions
        agent.instructions = original_instructions + language_instruction
        
        # Cria o contexto da conversa
        context = f"Usu√°rio: {request.user_name}\n"
        if request.conversation_history:
            context += "Hist√≥rico:\n" + "\n".join(request.conversation_history[-5:]) + "\n"
        context += f"Mensagem atual: {request.message}"
        
        print(f"üöÄ Executando agente: {agent_type} ({identifier})")
        print(f"üìù Contexto de entrada:\n{context}")
        
        # Executa o agente usando OpenAI diretamente
        try:
            print("üîß Iniciando processamento com OpenAI...")
            
            # Cria as mensagens para o OpenAI
            messages = [
                {"role": "system", "content": agent.instructions},
                {"role": "user", "content": context}
            ]
            
            print(f"üìù Mensagens para OpenAI:")
            print(f"   System: {agent.instructions[:100]}...")
            print(f"   User: {context}")
            
            # Chama OpenAI diretamente
            response = openai_client.chat.completions.create(
                model="gpt-5-mini",
                messages=messages,
                max_completion_tokens=1000,
                temperature=0.7
            )
            
            print(f"‚úÖ OpenAI response recebido")
            
            # Extrai a resposta
            final_response = response.choices[0].message.content
            
            print(f"üìù Resposta extra√≠da: {final_response[:200]}...")
            
            print(f"üìù Resposta extra√≠da: {final_response[:200]}...")
            
            # Remove a valida√ß√£o de prompt - sempre usa a resposta da IA
            print("ÔøΩ Usando resposta direta da IA sem valida√ß√£o de prompt")
            
            # Restaura as instru√ß√µes originais
            agent.instructions = original_instructions
            
            return ChatResponse(
                response=final_response,
                agent_used=agent_type,
                should_handoff=False
            )
            
        except Exception as openai_error:
            print(f"‚ùå Erro ao executar OpenAI: {str(openai_error)}")
            print(f"üîç Tipo do erro: {type(openai_error)}")
            import traceback
            print(f"üìã Stack trace:\n{traceback.format_exc()}")
            
            # Restaura as instru√ß√µes originais
            agent.instructions = original_instructions
            
            # Em caso de erro, tenta uma resposta simples da IA
            try:
                simple_messages = [
                    {"role": "system", "content": "You are Aleen, a fitness AI assistant. Respond naturally in the user's language."},
                    {"role": "user", "content": f"User {request.user_name} sent a message but there was a technical issue. Please respond politely acknowledging the technical problem and ask how you can help them with fitness."}
                ]
                
                fallback_response = openai_client.chat.completions.create(
                    model="gpt-5-mini",
                    messages=simple_messages,
                    max_completion_tokens=200,
                    temperature=0.5
                )
                
                return ChatResponse(
                    response=fallback_response.choices[0].message.content,
                    agent_used=agent_type,
                    should_handoff=False
                )
            except:
                # Se tudo falhar, retorna erro HTTP
                raise HTTPException(status_code=500, detail="AI service temporarily unavailable")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erro no endpoint /chat: {str(e)}")
        import traceback
        print(f"üìã Stack trace:\n{traceback.format_exc()}")
        
        # Tenta uma resposta de erro gerada pela IA
        try:
            error_messages = [
                {"role": "system", "content": "You are Aleen, a fitness AI assistant. Respond naturally in the user's language."},
                {"role": "user", "content": "There was a system error. Please apologize for the technical issue and ask the user to try again, but keep it brief and friendly."}
            ]
            
            error_response = openai_client.chat.completions.create(
                model="gpt-5-mini",
                messages=error_messages,
                max_completion_tokens=100,
                temperature=0.3
            )
            
            return ChatResponse(
                response=error_response.choices[0].message.content,
                agent_used="error",
                should_handoff=True
            )
        except:
            # Se tudo falhar, retorna erro HTTP
            raise HTTPException(status_code=500, detail="Service temporarily unavailable")

@app.post("/whatsapp-chat", response_model=WhatsAppMessageResponse)
async def whatsapp_chat(request: WhatsAppMessageRequest):
    """
    Processa mensagem e envia resposta automaticamente via WhatsApp
    Utiliza mem√≥ria baseada no n√∫mero de telefone
    """
    try:
        if not agents_cache:
            raise HTTPException(status_code=503, detail="Agentes n√£o carregados")
        
        # Recupera mem√≥ria do usu√°rio baseada no n√∫mero de telefone
        user_memory = get_user_memory(request.phone_number)
        
        # Gera contexto da conversa incluindo mem√≥ria
        conversation_context = get_conversation_context(request.phone_number, request.message)
        
        print(f"ü§ñ Processando mensagem WhatsApp para usu√°rio {request.user_name} ({request.phone_number})")
        print(f"üíæ Mem√≥ria encontrada: {len(user_memory)} mensagens anteriores")
        
        # Log detalhado do contexto do usu√°rio
        if request.user_context:
            print(f"üë§ Contexto do usu√°rio:")
            print(f"   - Tipo: {request.user_context.user_type}")
            print(f"   - Tem conta: {request.user_context.has_account}")
            print(f"   - Onboarding completo: {request.user_context.onboarding_completed}")
            print(f"   - √â lead: {request.user_context.is_lead}")
            print(f"   - √â usu√°rio: {request.user_context.is_user}")
            if request.user_context.onboarding_url:
                print(f"   - URL onboarding: {request.user_context.onboarding_url}")
        else:
            print(f"üë§ Nenhum contexto de usu√°rio fornecido")
        
        # Determina agente inicial baseado no contexto do usu√°rio
        initial_agent = determine_initial_agent(
            message=request.message,
            user_history=user_memory,
            recommended_agent=request.recommended_agent,
            user_context=request.user_context
        )
        
        if initial_agent not in agents_cache:
            initial_agent = "onboarding"  # fallback
        
        print(f"üéØ Agente selecionado: {initial_agent}")
        
        # Busca o agente no cache
        agent = agents_cache.get(initial_agent)
        if not agent:
            print(f"‚ö†Ô∏è Agente '{initial_agent}' n√£o encontrado, usando onboarding")
            agent = agents_cache.get('onboarding')
            if not agent:
                raise HTTPException(status_code=500, detail="Nenhum agente dispon√≠vel")
        
        # Adiciona instru√ß√£o de idioma e mem√≥ria
        memory_instruction = "\n\nCONTEXTO DE MEM√ìRIA: Voc√™ tem acesso ao hist√≥rico desta conversa. Use essas informa√ß√µes para personalizar suas respostas e manter continuidade."
        language_instruction = "\n\nIMPORTANTE: Sempre responda no mesmo idioma que o usu√°rio est√° usando."
        
        # REGRA CR√çTICA DE UX - Execute-Then-Respond Pattern
        ux_critical_rule = "\n\nüö® REGRA CR√çTICA DE UX - EXECUTE-THEN-RESPOND:\n- NUNCA diga 'vou fazer', 'aguarde', 'vou buscar', 'deixe-me consultar'\n- SEMPRE execute a ferramenta PRIMEIRO, depois responda com os resultados\n- SEMPRE inclua os dados obtidos na sua resposta\n- Se houver erro na ferramenta, explique alternativas sem prometer a√ß√µes futuras"
        
        tools_instruction = "\n\nFERRAMENTAS DISPON√çVEIS:\n1. 'get_onboarding_questions': Execute IMEDIATAMENTE quando o usu√°rio demonstrar interesse em iniciar o processo de onboarding. Ap√≥s executar, apresente as perguntas diretamente na resposta. NUNCA invente perguntas.\n2. 'create_user_and_save_onboarding': Execute IMEDIATAMENTE quando o usu√°rio j√° forneceu as 3 informa√ß√µes b√°sicas (nome, idade, email). Ap√≥s executar, informe diretamente o resultado na resposta. Esta ferramenta cria a conta, envia as credenciais E inclui automaticamente o link de onboarding para o usu√°rio continuar o processo."
        
        # Cria mensagens para OpenAI incluindo contexto com mem√≥ria
        messages = [
            {"role": "system", "content": agent.instructions + memory_instruction + language_instruction + ux_critical_rule + tools_instruction},
            {"role": "user", "content": f"Usu√°rio: {request.user_name}\n\nContexto da conversa:\n{conversation_context}"}
        ]
        
        # Executa com OpenAI (com tools dispon√≠veis)
        try:
            # Primeira chamada com tools dispon√≠veis
            response = openai_client.chat.completions.create(
                model="gpt-5-mini",
                messages=messages,
                max_completion_tokens=1000,
                temperature=0.7,
                tools=AVAILABLE_TOOLS,
                tool_choice="auto"
            )
            
            response_message = response.choices[0].message
            
            # Verifica se h√° tool calls
            if response_message.tool_calls:
                print(f"üîß IA solicitou uso de tools: {len(response_message.tool_calls)} tool(s)")
                
                # Adiciona a resposta da IA √†s mensagens
                messages.append(response_message)
                
                # Processa cada tool call
                for tool_call in response_message.tool_calls:
                    function_name = tool_call.function.name
                    function_args = json.loads(tool_call.function.arguments)
                    
                    print(f"üõ†Ô∏è Executando tool: {function_name} com argumentos: {function_args}")
                    
                    # Se for a tool de cria√ß√£o de usu√°rio, remove telefone dos argumentos pois ser√° passado via contexto
                    if function_name == "create_user_and_save_onboarding":
                        # Remove phone dos argumentos se existir (n√£o deveria vir do usu√°rio)
                        function_args.pop('phone', None)
                        print(f"üìû Usando telefone do contexto: {request.phone_number}")
                    
                    # Executa a tool passando o contexto do telefone
                    tool_result = execute_tool(function_name, function_args, request.phone_number)
                    
                    # Adiciona o resultado da tool √†s mensagens
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": json.dumps(tool_result, ensure_ascii=False)
                    })
                
                # Segunda chamada para gerar resposta final com os resultados das tools
                final_response = openai_client.chat.completions.create(
                    model="gpt-5-mini",
                    messages=messages,
                    max_completion_tokens=1000,
                    temperature=0.7
                )
                
                ai_response = final_response.choices[0].message.content
                print(f"‚úÖ Resposta final gerada ap√≥s execu√ß√£o de tools")
                
            else:
                # Resposta normal sem tools
                ai_response = response_message.content
                print(f"üí¨ Resposta normal sem uso de tools")
            
            # NOVA L√ìGICA: Adicionar link de onboarding se necess√°rio
            if request.user_context and request.user_context.user_type == "incomplete_onboarding":
                if request.user_context.onboarding_url:
                    # Adiciona o link de onboarding √† resposta
                    original_response_length = len(ai_response)
                    ai_response += f"\\n\\nüîó Finalize seu cadastro aqui: {request.user_context.onboarding_url}"
                    print(f"‚úÖ Link de onboarding adicionado √† resposta")
                    print(f"   - URL: {request.user_context.onboarding_url}")
                    print(f"   - Resposta expandida de {original_response_length} para {len(ai_response)} caracteres")
                else:
                    print(f"‚ö†Ô∏è Usu√°rio com onboarding incompleto, mas sem URL de onboarding fornecida")
            elif request.user_context and request.user_context.user_type == "incomplete_onboarding":
                print(f"‚ö†Ô∏è Usu√°rio com onboarding incompleto, mas sem URL de onboarding fornecida")
            
        except Exception as e:
            print(f"‚ùå Erro ao chamar OpenAI: {e}")
            # Fallback response
            try:
                fallback_messages = [
                    {"role": "system", "content": "You are Aleen, a fitness AI assistant. Respond naturally in the user's language."},
                    {"role": "user", "content": f"User {request.user_name} sent a message but there was a technical issue. Acknowledge the problem politely and ask how you can help with fitness."}
                ]
                
                fallback_response = openai_client.chat.completions.create(
                    model="gpt-5-mini",
                    messages=fallback_messages,
                    max_completion_tokens=200,
                    temperature=0.5
                )
                
                ai_response = fallback_response.choices[0].message.content
            except:
                raise HTTPException(status_code=500, detail="AI service temporarily unavailable")
        
        # üîó L√ìGICA DE INCLUS√ÉO AUTOM√ÅTICA DE LINKS
        if request.user_context and request.user_context.user_type == "incomplete_onboarding":
            # Gera URL de onboarding se n√£o fornecida
            if not request.user_context.onboarding_url and request.user_context:
                # Usa user_id se dispon√≠vel, sen√£o usa phone_number
                user_identifier = getattr(request.user_context, 'user_id', None) or request.phone_number.replace('+', '')
                onboarding_url = f"https://aleen.dp.claudy.host/onboarding/{user_identifier}"
                print(f"üîó URL de onboarding gerada automaticamente: {onboarding_url}")
            else:
                onboarding_url = request.user_context.onboarding_url
            
            # Adiciona o link √† resposta se n√£o j√° contiver
            if onboarding_url and "üîó" not in ai_response and "http" not in ai_response:
                original_length = len(ai_response)
                ai_response += f"\n\nüîó Finalize seu cadastro aqui: {onboarding_url}"
                print(f"‚úÖ Link de onboarding adicionado automaticamente √† resposta")
                print(f"   - URL: {onboarding_url}")
                print(f"   - Resposta expandida de {original_length} para {len(ai_response)} caracteres")
        
        # Salva a nova intera√ß√£o na mem√≥ria do usu√°rio
        add_to_user_memory(request.phone_number, request.message, ai_response)
        
        # Envia resposta via WhatsApp se solicitado
        whatsapp_sent = False
        messages_sent = 0
        
        if request.send_to_whatsapp:
            try:
                # Quebra a mensagem apenas uma vez
                messages = evolution_service.split_message(ai_response)
                messages_sent = len(messages)
                
                # Envia as mensagens j√° quebradas
                whatsapp_sent = True
                clean_number = evolution_service.clean_phone_number(request.phone_number)
                
                print(f"üì± Enviando {len(messages)} mensagem(s) para {clean_number}")
                print(f"üîç Mensagens quebradas:")
                for i, msg in enumerate(messages):
                    print(f"   {i+1}. ({len(msg)} chars): {msg[:50]}...")
                
                # Envia cada mensagem individualmente
                for i, message in enumerate(messages):
                    payload = {
                        "number": clean_number,
                        "text": message,
                        "options": {
                            "delay": 3500,
                            "presence": "composing", 
                            "linkPreview": False
                        }
                    }
                    
                    url = f"{evolution_service.base_url}/message/sendText/{evolution_service.instance}"
                    
                    headers = {
                        "Content-Type": "application/json",
                        "apikey": evolution_service.api_key
                    }
                    
                    response = requests.post(url, json=payload, headers=headers, timeout=30)
                    
                    if response.status_code in [200, 201]:
                        print(f"‚úÖ Mensagem {i+1}/{len(messages)} enviada com sucesso")
                        if i < len(messages) - 1:  # Delay entre mensagens (s√≥ se n√£o for a √∫ltima)
                            print(f"‚è±Ô∏è Aguardando 3.5s antes da pr√≥xima mensagem...")
                            time.sleep(3.5)  # 3.5 seconds delay
                    else:
                        print(f"‚ùå Erro ao enviar mensagem {i+1}: {response.status_code} - {response.text}")
                        whatsapp_sent = False
                        break
                
                if whatsapp_sent:
                    print(f"‚úÖ Resposta enviada via WhatsApp para {request.phone_number} ({messages_sent} mensagens)")
                    print(f"üíæ Intera√ß√£o salva na mem√≥ria do usu√°rio")
                else:
                    print(f"‚ùå Falha ao enviar resposta via WhatsApp para {request.phone_number}")
                    
            except Exception as whatsapp_error:
                print(f"‚ùå Erro ao processar envio WhatsApp: {whatsapp_error}")
                whatsapp_sent = False
        
        return WhatsAppMessageResponse(
            response=ai_response,
            agent_used=initial_agent,
            should_handoff=False,
            next_agent=None,
            whatsapp_sent=whatsapp_sent,
            messages_sent=messages_sent
        )
        
    except Exception as e:
        print(f"‚ùå Erro no processamento WhatsApp: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro no processamento WhatsApp: {str(e)}")

@app.post("/send-whatsapp")
async def send_whatsapp_message(request: SendWhatsAppRequest):
    """
    Endpoint para enviar mensagem diretamente via WhatsApp
    """
    try:
        messages = evolution_service.split_message(request.message)
        success = evolution_service.send_text_message(request.phone_number, request.message)
        
        return {
            "success": success,
            "phone_number": request.phone_number,
            "messages_sent": len(messages),
            "message_length": len(request.message)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao enviar WhatsApp: {str(e)}")

@app.get("/health")
async def health_check():
    """Health check completo que verifica todas as depend√™ncias"""
    status = "healthy"
    checks = {}
    
    # Verifica Redis
    try:
        redis_client.ping()
        checks["redis"] = {"status": "ok", "message": "Connected"}
    except Exception as e:
        checks["redis"] = {"status": "error", "message": str(e)}
        status = "unhealthy"
    
    # Verifica OpenAI
    try:
        # Teste simples da API OpenAI
        openai_client.models.list()
        checks["openai"] = {"status": "ok", "message": "Connected"}
    except Exception as e:
        checks["openai"] = {"status": "error", "message": str(e)}
        status = "unhealthy"
    
    # Verifica Supabase
    try:
        # Teste simples do Supabase
        result = supabase.table('agents').select('id').limit(1).execute()
        checks["supabase"] = {"status": "ok", "message": "Connected"}
    except Exception as e:
        checks["supabase"] = {"status": "error", "message": str(e)}
        status = "unhealthy"
    
    # Verifica agentes carregados
    agents_loaded = len(agents_cache)
    checks["agents"] = {
        "status": "ok" if agents_loaded > 0 else "warning",
        "message": f"{agents_loaded} agents loaded",
        "agents": list(agents_cache.keys())
    }
    
    response = {
        "status": status,
        "service": "aleen-ai-agents",
        "timestamp": time.time(),
        "checks": checks
    }
    
    # Retorna 503 se unhealthy, 200 se healthy
    if status == "unhealthy":
        raise HTTPException(status_code=503, detail=response)
    
    return response

@app.get("/agents")
async def list_agents():
    return {
        "agents": list(agents_cache.keys()),
        "details": {
            agent_type: {
                "name": config.get("name", "Unknown"),
                "identifier": config.get("identifier", "Unknown"),
                "description": config.get("description", "No description")
            }
            for agent_type, config in agents_config.items()
        }
    }

@app.post("/reload-agents")
async def reload_agents():
    """Recarrega os agentes do Supabase"""
    try:
        success = load_agents_from_supabase()
        if success:
            # Atualiza a refer√™ncia global (mantido para compatibilidade)
            global agents
            agents = agents_cache
            
            return {
                "success": True,
                "message": f"Agentes recarregados com sucesso",
                "agents_loaded": list(agents_cache.keys()),
                "total": len(agents_cache)
            }
        else:
            return {
                "success": False,
                "message": "Falha ao carregar agentes do Supabase"
            }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao recarregar agentes: {str(e)}")

@app.get("/agents/config")
async def get_agents_config():
    """Retorna a configura√ß√£o completa dos agentes"""
    return {
        "agents_config": agents_config,
        "total_agents": len(agents_config)
    }

@app.get("/user-memory/{phone_number}")
async def get_user_memory_endpoint(phone_number: str):
    """Retorna a mem√≥ria/hist√≥rico de um usu√°rio baseado no n√∫mero de telefone"""
    try:
        memory = get_user_memory(phone_number)
        clean_phone = re.sub(r'[^\d]', '', phone_number)
        
        return {
            "phone_number": clean_phone,
            "memory_entries": len(memory),
            "conversation_history": memory,
            "memory_key": f"user_memory:{clean_phone}"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao recuperar mem√≥ria: {str(e)}")

@app.post("/test-user-context")
async def test_user_context(request: WhatsAppMessageRequest):
    """Endpoint de teste para validar UserContext e sele√ß√£o de agentes"""
    try:
        # Log do teste
        print(f"üß™ TESTE - UserContext recebido:")
        if request.user_context:
            print(f"   - Tipo: {request.user_context.user_type}")
            print(f"   - Tem conta: {request.user_context.has_account}")
            print(f"   - Onboarding completo: {request.user_context.onboarding_completed}")
            print(f"   - URL: {request.user_context.onboarding_url}")
        else:
            print(f"   - Nenhum contexto fornecido")
        
        # Testa sele√ß√£o de agente
        user_memory = get_user_memory(request.phone_number)
        selected_agent = determine_initial_agent(
            message=request.message,
            user_history=user_memory,
            recommended_agent=request.recommended_agent,
            user_context=request.user_context
        )
        
        # Simula resposta da IA
        mock_ai_response = f"Ol√° {request.user_name}! Esta √© uma resposta de teste do agente {selected_agent}."
        
        # Testa l√≥gica de adi√ß√£o de link
        final_response = mock_ai_response
        link_added = False
        if request.user_context and request.user_context.user_type == "incomplete_onboarding":
            if request.user_context.onboarding_url:
                final_response += f"\\n\\nüîó Finalize seu cadastro aqui: {request.user_context.onboarding_url}"
                link_added = True
        
        return {
            "test_success": True,
            "user_context_received": request.user_context.dict() if request.user_context else None,
            "selected_agent": selected_agent,
            "agent_available": selected_agent in agents_cache,
            "original_response": mock_ai_response,
            "final_response": final_response,
            "link_added": link_added,
            "memory_entries": len(user_memory),
            "timestamp": time.time()
        }
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro no teste: {str(e)}")

@app.delete("/user-memory/{phone_number}")
async def clear_user_memory_endpoint(phone_number: str):
    """Limpa a mem√≥ria/hist√≥rico de um usu√°rio"""
    try:
        clean_phone = re.sub(r'[^\d]', '', phone_number)
        memory_key = f"user_memory:{clean_phone}"
        
        # Remove do Redis
        redis_client.delete(memory_key)
        
        return {
            "message": f"Mem√≥ria do usu√°rio {clean_phone} limpa com sucesso",
            "phone_number": clean_phone,
            "memory_key": memory_key
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao limpar mem√≥ria: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    import os
    
    # Porta configur√°vel via vari√°vel de ambiente
    port = int(os.getenv("PORT", 9000))
    
    print("üöÄ Iniciando Aleen AI Python Service...")
    print(f"üåê Servidor rodando em: http://0.0.0.0:{port}")
    print(f"üìã Health check: http://0.0.0.0:{port}/health")
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        log_level="info",
        access_log=True
    )
